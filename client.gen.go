// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	_defaultScopes = "_default.Scopes"
)

// GetApiV1HealthchecksParams defines parameters for GetApiV1Healthchecks.
type GetApiV1HealthchecksParams struct {
	// Target Field to sort by target.
	Target *string `form:"target,omitempty" json:"target,omitempty"`

	// Protocol Field to sort by protocol.
	Protocol *string `form:"protocol,omitempty" json:"protocol,omitempty"`

	// Path Field to sort by path.
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// Method Field to sort by method.
	Method *string `form:"method,omitempty" json:"method,omitempty"`

	// Port Field to sort by port.
	Port *int `form:"port,omitempty" json:"port,omitempty"`
}

// PostApiV1HealthchecksJSONBody defines parameters for PostApiV1Healthchecks.
type PostApiV1HealthchecksJSONBody struct {
	Body        *string                 `json:"body,omitempty"`
	ContentType *string                 `json:"contentType,omitempty"`
	Description string                  `json:"description"`
	Enabled     bool                    `json:"enabled"`
	Headers     *map[string]interface{} `json:"headers,omitempty"`
	HttpCode    string                  `json:"httpCode"`
	Interval    int                     `json:"interval"`
	Labels      *map[string]interface{} `json:"labels,omitempty"`
	Method      string                  `json:"method"`
	Name        string                  `json:"name"`
	Path        string                  `json:"path"`
	Port        int                     `json:"port"`
	Protocol    string                  `json:"protocol"`
	Query       *map[string]interface{} `json:"query,omitempty"`
	Target      string                  `json:"target"`
	Timeout     int                     `json:"timeout"`
}

// PutApiV1HealthchecksIdJSONBody defines parameters for PutApiV1HealthchecksId.
type PutApiV1HealthchecksIdJSONBody struct {
	Body        *string                 `json:"body,omitempty"`
	ContentType *string                 `json:"contentType,omitempty"`
	Description string                  `json:"description"`
	Enabled     bool                    `json:"enabled"`
	Headers     *map[string]interface{} `json:"headers,omitempty"`
	HttpCode    string                  `json:"httpCode"`
	Interval    int                     `json:"interval"`
	Labels      *map[string]interface{} `json:"labels,omitempty"`
	Method      string                  `json:"method"`
	Name        string                  `json:"name"`
	Path        string                  `json:"path"`
	Port        int                     `json:"port"`
	Protocol    string                  `json:"protocol"`
	Query       *map[string]interface{} `json:"query,omitempty"`
	Target      string                  `json:"target"`
	Timeout     int                     `json:"timeout"`
}

// PostApiV1HealthchecksJSONRequestBody defines body for PostApiV1Healthchecks for application/json ContentType.
type PostApiV1HealthchecksJSONRequestBody PostApiV1HealthchecksJSONBody

// PutApiV1HealthchecksIdJSONRequestBody defines body for PutApiV1HealthchecksId for application/json ContentType.
type PutApiV1HealthchecksIdJSONRequestBody PutApiV1HealthchecksIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Healthchecks request
	GetApiV1Healthchecks(ctx context.Context, params *GetApiV1HealthchecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1HealthchecksWithBody request with any body
	PostApiV1HealthchecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Healthchecks(ctx context.Context, body PostApiV1HealthchecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1HealthchecksId request
	DeleteApiV1HealthchecksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1HealthchecksId request
	GetApiV1HealthchecksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1HealthchecksIdWithBody request with any body
	PutApiV1HealthchecksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1HealthchecksId(ctx context.Context, id string, body PutApiV1HealthchecksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Metrics request
	GetApiV1Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Healthchecks(ctx context.Context, params *GetApiV1HealthchecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HealthchecksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1HealthchecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HealthchecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Healthchecks(ctx context.Context, body PostApiV1HealthchecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1HealthchecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1HealthchecksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1HealthchecksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1HealthchecksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1HealthchecksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1HealthchecksIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1HealthchecksIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1HealthchecksId(ctx context.Context, id string, body PutApiV1HealthchecksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1HealthchecksIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1HealthchecksRequest generates requests for GetApiV1Healthchecks
func NewGetApiV1HealthchecksRequest(server string, params *GetApiV1HealthchecksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthchecks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Target != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target", runtime.ParamLocationQuery, *params.Target); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Protocol != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "protocol", runtime.ParamLocationQuery, *params.Protocol); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Port != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "port", runtime.ParamLocationQuery, *params.Port); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1HealthchecksRequest calls the generic PostApiV1Healthchecks builder with application/json body
func NewPostApiV1HealthchecksRequest(server string, body PostApiV1HealthchecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1HealthchecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1HealthchecksRequestWithBody generates requests for PostApiV1Healthchecks with any type of body
func NewPostApiV1HealthchecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthchecks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1HealthchecksIdRequest generates requests for DeleteApiV1HealthchecksId
func NewDeleteApiV1HealthchecksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthchecks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1HealthchecksIdRequest generates requests for GetApiV1HealthchecksId
func NewGetApiV1HealthchecksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthchecks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1HealthchecksIdRequest calls the generic PutApiV1HealthchecksId builder with application/json body
func NewPutApiV1HealthchecksIdRequest(server string, id string, body PutApiV1HealthchecksIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1HealthchecksIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiV1HealthchecksIdRequestWithBody generates requests for PutApiV1HealthchecksId with any type of body
func NewPutApiV1HealthchecksIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/healthchecks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1MetricsRequest generates requests for GetApiV1Metrics
func NewGetApiV1MetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1HealthchecksWithResponse request
	GetApiV1HealthchecksWithResponse(ctx context.Context, params *GetApiV1HealthchecksParams, reqEditors ...RequestEditorFn) (*GetApiV1HealthchecksResponse, error)

	// PostApiV1HealthchecksWithBodyWithResponse request with any body
	PostApiV1HealthchecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HealthchecksResponse, error)

	PostApiV1HealthchecksWithResponse(ctx context.Context, body PostApiV1HealthchecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HealthchecksResponse, error)

	// DeleteApiV1HealthchecksIdWithResponse request
	DeleteApiV1HealthchecksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV1HealthchecksIdResponse, error)

	// GetApiV1HealthchecksIdWithResponse request
	GetApiV1HealthchecksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV1HealthchecksIdResponse, error)

	// PutApiV1HealthchecksIdWithBodyWithResponse request with any body
	PutApiV1HealthchecksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1HealthchecksIdResponse, error)

	PutApiV1HealthchecksIdWithResponse(ctx context.Context, id string, body PutApiV1HealthchecksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1HealthchecksIdResponse, error)

	// GetApiV1MetricsWithResponse request
	GetApiV1MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MetricsResponse, error)
}

type GetApiV1HealthchecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count      *int `json:"count,omitempty"`
		HttpChecks *[]struct {
			Body        *string `json:"body,omitempty"`
			ContentType *string `json:"contentType,omitempty"`
			Description *string `json:"description,omitempty"`
			Headers     *string `json:"headers,omitempty"`
			Id          *string `json:"id,omitempty"`
			Interval    *int    `json:"interval,omitempty"`
			Labels      *string `json:"labels,omitempty"`
			Method      *string `json:"method,omitempty"`
			Name        *string `json:"name,omitempty"`
			Path        *string `json:"path,omitempty"`
			Port        *int    `json:"port,omitempty"`
			Protocol    *string `json:"protocol,omitempty"`
			Query       *string `json:"query,omitempty"`
			Target      *string `json:"target,omitempty"`
			Timeout     *int    `json:"timeout,omitempty"`
			ValidStatus *int    `json:"valid-status,omitempty"`
		} `json:"http-checks,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1HealthchecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HealthchecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1HealthchecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Body        *string `json:"body,omitempty"`
		ContentType *string `json:"contentType,omitempty"`
		Description *string `json:"description,omitempty"`
		Headers     *string `json:"headers,omitempty"`
		Id          *string `json:"id,omitempty"`
		Interval    *int    `json:"interval,omitempty"`
		Labels      *string `json:"labels,omitempty"`
		Method      *string `json:"method,omitempty"`
		Name        *string `json:"name,omitempty"`
		Path        *string `json:"path,omitempty"`
		Port        *int    `json:"port,omitempty"`
		Protocol    *string `json:"protocol,omitempty"`
		Query       *string `json:"query,omitempty"`
		Target      *string `json:"target,omitempty"`
		Timeout     *int    `json:"timeout,omitempty"`
		ValidStatus *int    `json:"valid-status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1HealthchecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1HealthchecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1HealthchecksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1HealthchecksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1HealthchecksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1HealthchecksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Body        *string `json:"body,omitempty"`
		ContentType *string `json:"contentType,omitempty"`
		Description *string `json:"description,omitempty"`
		Headers     *string `json:"headers,omitempty"`
		Id          *string `json:"id,omitempty"`
		Interval    *int    `json:"interval,omitempty"`
		Labels      *string `json:"labels,omitempty"`
		Method      *string `json:"method,omitempty"`
		Name        *string `json:"name,omitempty"`
		Path        *string `json:"path,omitempty"`
		Port        *int    `json:"port,omitempty"`
		Protocol    *string `json:"protocol,omitempty"`
		Query       *string `json:"query,omitempty"`
		Target      *string `json:"target,omitempty"`
		Timeout     *int    `json:"timeout,omitempty"`
		ValidStatus *int    `json:"valid-status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1HealthchecksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1HealthchecksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1HealthchecksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV1HealthchecksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1HealthchecksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1HealthchecksWithResponse request returning *GetApiV1HealthchecksResponse
func (c *ClientWithResponses) GetApiV1HealthchecksWithResponse(ctx context.Context, params *GetApiV1HealthchecksParams, reqEditors ...RequestEditorFn) (*GetApiV1HealthchecksResponse, error) {
	rsp, err := c.GetApiV1Healthchecks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HealthchecksResponse(rsp)
}

// PostApiV1HealthchecksWithBodyWithResponse request with arbitrary body returning *PostApiV1HealthchecksResponse
func (c *ClientWithResponses) PostApiV1HealthchecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1HealthchecksResponse, error) {
	rsp, err := c.PostApiV1HealthchecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HealthchecksResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1HealthchecksWithResponse(ctx context.Context, body PostApiV1HealthchecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1HealthchecksResponse, error) {
	rsp, err := c.PostApiV1Healthchecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1HealthchecksResponse(rsp)
}

// DeleteApiV1HealthchecksIdWithResponse request returning *DeleteApiV1HealthchecksIdResponse
func (c *ClientWithResponses) DeleteApiV1HealthchecksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV1HealthchecksIdResponse, error) {
	rsp, err := c.DeleteApiV1HealthchecksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1HealthchecksIdResponse(rsp)
}

// GetApiV1HealthchecksIdWithResponse request returning *GetApiV1HealthchecksIdResponse
func (c *ClientWithResponses) GetApiV1HealthchecksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV1HealthchecksIdResponse, error) {
	rsp, err := c.GetApiV1HealthchecksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1HealthchecksIdResponse(rsp)
}

// PutApiV1HealthchecksIdWithBodyWithResponse request with arbitrary body returning *PutApiV1HealthchecksIdResponse
func (c *ClientWithResponses) PutApiV1HealthchecksIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1HealthchecksIdResponse, error) {
	rsp, err := c.PutApiV1HealthchecksIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1HealthchecksIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1HealthchecksIdWithResponse(ctx context.Context, id string, body PutApiV1HealthchecksIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1HealthchecksIdResponse, error) {
	rsp, err := c.PutApiV1HealthchecksId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1HealthchecksIdResponse(rsp)
}

// GetApiV1MetricsWithResponse request returning *GetApiV1MetricsResponse
func (c *ClientWithResponses) GetApiV1MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MetricsResponse, error) {
	rsp, err := c.GetApiV1Metrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MetricsResponse(rsp)
}

// ParseGetApiV1HealthchecksResponse parses an HTTP response from a GetApiV1HealthchecksWithResponse call
func ParseGetApiV1HealthchecksResponse(rsp *http.Response) (*GetApiV1HealthchecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HealthchecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count      *int `json:"count,omitempty"`
			HttpChecks *[]struct {
				Body        *string `json:"body,omitempty"`
				ContentType *string `json:"contentType,omitempty"`
				Description *string `json:"description,omitempty"`
				Headers     *string `json:"headers,omitempty"`
				Id          *string `json:"id,omitempty"`
				Interval    *int    `json:"interval,omitempty"`
				Labels      *string `json:"labels,omitempty"`
				Method      *string `json:"method,omitempty"`
				Name        *string `json:"name,omitempty"`
				Path        *string `json:"path,omitempty"`
				Port        *int    `json:"port,omitempty"`
				Protocol    *string `json:"protocol,omitempty"`
				Query       *string `json:"query,omitempty"`
				Target      *string `json:"target,omitempty"`
				Timeout     *int    `json:"timeout,omitempty"`
				ValidStatus *int    `json:"valid-status,omitempty"`
			} `json:"http-checks,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1HealthchecksResponse parses an HTTP response from a PostApiV1HealthchecksWithResponse call
func ParsePostApiV1HealthchecksResponse(rsp *http.Response) (*PostApiV1HealthchecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1HealthchecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Body        *string `json:"body,omitempty"`
			ContentType *string `json:"contentType,omitempty"`
			Description *string `json:"description,omitempty"`
			Headers     *string `json:"headers,omitempty"`
			Id          *string `json:"id,omitempty"`
			Interval    *int    `json:"interval,omitempty"`
			Labels      *string `json:"labels,omitempty"`
			Method      *string `json:"method,omitempty"`
			Name        *string `json:"name,omitempty"`
			Path        *string `json:"path,omitempty"`
			Port        *int    `json:"port,omitempty"`
			Protocol    *string `json:"protocol,omitempty"`
			Query       *string `json:"query,omitempty"`
			Target      *string `json:"target,omitempty"`
			Timeout     *int    `json:"timeout,omitempty"`
			ValidStatus *int    `json:"valid-status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1HealthchecksIdResponse parses an HTTP response from a DeleteApiV1HealthchecksIdWithResponse call
func ParseDeleteApiV1HealthchecksIdResponse(rsp *http.Response) (*DeleteApiV1HealthchecksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1HealthchecksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1HealthchecksIdResponse parses an HTTP response from a GetApiV1HealthchecksIdWithResponse call
func ParseGetApiV1HealthchecksIdResponse(rsp *http.Response) (*GetApiV1HealthchecksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1HealthchecksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Body        *string `json:"body,omitempty"`
			ContentType *string `json:"contentType,omitempty"`
			Description *string `json:"description,omitempty"`
			Headers     *string `json:"headers,omitempty"`
			Id          *string `json:"id,omitempty"`
			Interval    *int    `json:"interval,omitempty"`
			Labels      *string `json:"labels,omitempty"`
			Method      *string `json:"method,omitempty"`
			Name        *string `json:"name,omitempty"`
			Path        *string `json:"path,omitempty"`
			Port        *int    `json:"port,omitempty"`
			Protocol    *string `json:"protocol,omitempty"`
			Query       *string `json:"query,omitempty"`
			Target      *string `json:"target,omitempty"`
			Timeout     *int    `json:"timeout,omitempty"`
			ValidStatus *int    `json:"valid-status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiV1HealthchecksIdResponse parses an HTTP response from a PutApiV1HealthchecksIdWithResponse call
func ParsePutApiV1HealthchecksIdResponse(rsp *http.Response) (*PutApiV1HealthchecksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1HealthchecksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1MetricsResponse parses an HTTP response from a GetApiV1MetricsWithResponse call
func ParseGetApiV1MetricsResponse(rsp *http.Response) (*GetApiV1MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
